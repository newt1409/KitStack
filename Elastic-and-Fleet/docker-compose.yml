version: "2.2"

services:
  certs:
    image: docker.elastic.co/elasticsearch/elasticsearch:${ES_VERSION}
    container_name: certs
    volumes:
      - ./secrets/certs:/usr/share/elasticsearch/config/certs
      - ./setup:/setup
      - ./:/startup
    user: "0"
    environment:
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
      KIBANA_PASSWORD: ${KIBANA_PASSWORD}
      ES_HOST: ${ES_HOST}
      CERT_DOMAIN: ${CERT_DOMAIN}
    command: bash /setup/certs.sh
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/es01/es01.crt ]"]
      interval: 1s
      timeout: 2s
      retries: 120

  es01:
    depends_on:
      certs:
        condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:${ES_VERSION}
    restart: always
    container_name: es01
    volumes:
      - ./secrets/certs:/usr/share/elasticsearch/config/certs
      - ./esdata/esdata01:/usr/share/elasticsearch/data
    ports:
      - ${ES_PORT}:9200
    environment:
      - node.name=es01
      - cluster.name=${CLUSTER_NAME}
      - cluster.initial_master_nodes=es01,es02,es03
      - discovery.seed_hosts=es02,es03
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es01/es01.key
      - xpack.security.http.ssl.certificate=certs/es01/es01.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.http.ssl.verification_mode=certificate
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es01/es01.key
      - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
    mem_limit: ${MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  es02:
    depends_on:
      - es01
    image: docker.elastic.co/elasticsearch/elasticsearch:${ES_VERSION}
    restart: always
    container_name: es02
    volumes:
      - ./secrets/certs:/usr/share/elasticsearch/config/certs
      - ./esdata/esdata02:/usr/share/elasticsearch/data
    environment:
      - node.name=es02
      - cluster.name=${CLUSTER_NAME}
      - cluster.initial_master_nodes=es01,es02,es03
      - discovery.seed_hosts=es01,es03
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es02/es02.key
      - xpack.security.http.ssl.certificate=certs/es02/es02.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.http.ssl.verification_mode=certificate
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es02/es02.key
      - xpack.security.transport.ssl.certificate=certs/es02/es02.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
    mem_limit: ${MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  es03:
    depends_on:
      - es02
    image: docker.elastic.co/elasticsearch/elasticsearch:${ES_VERSION}
    restart: always
    container_name: es03
    volumes:
      - ./secrets/certs:/usr/share/elasticsearch/config/certs
      - ./esdata/esdata03:/usr/share/elasticsearch/data
    environment:
      - node.name=es03
      - cluster.name=${CLUSTER_NAME}
      - cluster.initial_master_nodes=es01,es02,es03
      - discovery.seed_hosts=es01,es02
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es03/es03.key
      - xpack.security.http.ssl.certificate=certs/es03/es03.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.http.ssl.verification_mode=certificate
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es03/es03.key
      - xpack.security.transport.ssl.certificate=certs/es03/es03.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
    mem_limit: ${MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  setup:
    depends_on:
      es01:
        condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:${ES_VERSION}
    restart: always
    container_name: setup
    volumes:
      - ./secrets/certs:/usr/share/elasticsearch/config/certs
    user: "0"
    command: >
      bash -c '
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u elastic:${ELASTIC_PASSWORD} -H "Content-Type: application/json" https://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;    
        echo "Setup Finished"
        sleep 25
      '
    healthcheck:
      test: "exit 0"
      interval: 1s
      timeout: 5s
      retries: 120

  kibana:
    depends_on:
      es01:
        condition: service_healthy
      setup:
        condition: service_healthy
    image: docker.elastic.co/kibana/kibana:${ES_VERSION}
    restart: always
    container_name: kibana
    volumes:
      - ./kibana/kibana.yml:/usr/share/kibana/config/kibana.yml:ro
      - ./secrets/certs/kibana:/usr/share/kibana/config/certificates
    ports:
      - ${KIBANA_PORT}:5601
    environment:
      - ELASTICSEARCH_HOSTS=https://${ES_HOST}:9200
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
    mem_limit: ${MEM_LIMIT}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I --insecure https://elastic:${ELASTIC_PASSWORD}@localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  fleet_token:
    depends_on:
      kibana:
        condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:${ES_VERSION}
    restart: always
    container_name: fleet_token
    volumes:
      - ./secrets/certs:/usr/share/elasticsearch/config/certs
      - ./setup:/setup
    user: "0"
    environment:
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
      ES_HOST: ${ES_HOST}
    command: bash /setup/fleet_token.sh
    healthcheck:
      test: ["CMD-SHELL", "[ -f /setup/fleet.token ]"]
      interval: 1s
      timeout: 2s
      retries: 120

  fleet_server:
    image: docker.elastic.co/beats/elastic-agent:${ES_VERSION}
    restart: always
    container_name: fleet_server
    depends_on:
      fleet_token:
        condition: service_healthy
      kibana:
        condition: service_healthy
    env_file:
      - ./setup/fleet.token
    environment:
      - "FLEET_SERVER_ENABLE=true"
      - "FLEET_SERVER_ELASTICSEARCH_HOST=https://${ES_HOST}:9200"
      #- "FLEET_SERVER_SERVICE_TOKEN=AAEAAWVsYXN0aWMvZmxlZXQtc2VydmVyL3Rva2VuLTE2NDU3MjEzNzQ3OTA6VGw5RkcydnFUR2llOW9heWUxeVRGdw"
      - "FLEET_URL=https://${ES_HOST}:8220"
      
      - "FLEET_SERVER_INSECURE_HTTP=0"
      - "FLEET_INSECURE=1"
      - "FLEET_SERVER_CERT=/usr/share/elastic-agent/cert.crt"
      - "FLEET_SERVER_CERT_KEY=/usr/share/elastic-agent/cert.key"
      - "FLEET_SERVER_ELASTICSEARCH_CA=/usr/share/elastic-agent/ca.pem"
      - "KIBANA_FLEET_CA=/usr/share/elastic-agent/ca.pem"
      - "FLEET_CA=/usr/share/elastic-agent/ca.pem"
      - "ELASTICSEARCH_CA=/usr/share/elastic-agent/ca.pem"
      - "KIBANA_CA=/usr/share/elastic-agent/ca.pem"
    ports:
      - "8220:8220"
    healthcheck:
      test: "curl -f http://127.0.0.1:8220/api/status | grep HEALTHY 2>&1 >/dev/null"
      retries: 12
      interval: 5s
    volumes:
      - ./secrets/certs/fleet/fleet.crt:/usr/share/elastic-agent/cert.crt:ro
      - ./secrets/certs/fleet/fleet.key:/usr/share/elastic-agent/cert.key:ro
      - ./secrets/certs/kibana/elasticsearch-ca.pem:/usr/share/elastic-agent/ca.pem:ro 

  filebeat:
    image: docker.elastic.co/beats/filebeat:$ES_VERSION
    restart: always
    container_name: filebeat
    depends_on:
        - kibana
    environment:
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
      ES_HOST: ${ES_HOST}
    volumes:
        - ./filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:Z
        - ../Zeek/zeek/spool/manager/:/pcap:ro
        - ../Suricata/suricata/logs:/suricata:Z
        - ./secrets/certs:/usr/share/filebeat/config/certs
    command: -e
